{"ast":null,"code":"import _classCallCheck from \"/home/jorenza/git/react/djim-beats/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jorenza/git/react/djim-beats/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jorenza/git/react/djim-beats/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jorenza/git/react/djim-beats/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jorenza/git/react/djim-beats/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\n\nvar BeatsState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BeatsState, _React$Component);\n\n  function BeatsState() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BeatsState);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BeatsState)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      beatRowCount: 1,\n      soundRowCount: 1,\n      soundCardCount: 0,\n      noteValue: 1,\n      maxValue: 4\n    };\n    return _this;\n  }\n\n  _createClass(BeatsState, [{\n    key: \"decrementNoteValue\",\n    value: function decrementNoteValue() {\n      if (this.state.noteValue === 1) {\n        this.setState({\n          noteValue: this.state.maxValue\n        });\n      } else {\n        this.setState({\n          noteValue: this.state.noteValue - 1\n        });\n      }\n    }\n  }, {\n    key: \"incrementNoteValue\",\n    value: function incrementNoteValue() {\n      if (this.state.noteValue === this.state.maxValue) {\n        this.setState({\n          noteValue: 1\n        });\n      } else {\n        this.setState({\n          noteValue: this.state.noteValue + 1\n        });\n      }\n    }\n  }, {\n    key: \"incrementBeatRowCount\",\n    value: function incrementBeatRowCount() {\n      this.setState({\n        beatRowCount: this.beatRowCount + 1\n      });\n    }\n  }, {\n    key: \"decrementBeatRowCount\",\n    value: function decrementBeatRowCount() {\n      this.setState({\n        beatRowCount: this.beatRowCount - 1\n      });\n    }\n  }]);\n\n  return BeatsState;\n}(React.Component);\n\nexport default BeatsState;","map":{"version":3,"sources":["/home/jorenza/git/react/djim-beats/src/state.js"],"names":["React","BeatsState","state","beatRowCount","soundRowCount","soundCardCount","noteValue","maxValue","setState","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,U;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,YAAY,EAAE,CADV;AAEJC,MAAAA,aAAa,EAAE,CAFX;AAGJC,MAAAA,cAAc,EAAE,CAHZ;AAIJC,MAAAA,SAAS,EAAE,CAJP;AAKJC,MAAAA,QAAQ,EAAE;AALN,K;;;;;;yCAOa;AACjB,UAAI,KAAKL,KAAL,CAAWI,SAAX,KAAyB,CAA7B,EAAgC;AAC5B,aAAKE,QAAL,CAAc;AAAEF,UAAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWK;AAAxB,SAAd;AACH,OAFD,MAEO;AACH,aAAKC,QAAL,CAAc;AAAEF,UAAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWI,SAAX,GAAuB;AAApC,SAAd;AACH;AACJ;;;yCACoB;AACjB,UAAI,KAAKJ,KAAL,CAAWI,SAAX,KAAyB,KAAKJ,KAAL,CAAWK,QAAxC,EAAkD;AAC9C,aAAKC,QAAL,CAAc;AAAEF,UAAAA,SAAS,EAAE;AAAb,SAAd;AACH,OAFD,MAEO;AACH,aAAKE,QAAL,CAAc;AAAEF,UAAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWI,SAAX,GAAuB;AAApC,SAAd;AACH;AACJ;;;4CACuB;AACpB,WAAKE,QAAL,CAAc;AAAEL,QAAAA,YAAY,EAAE,KAAKA,YAAL,GAAoB;AAApC,OAAd;AACH;;;4CACuB;AACpB,WAAKK,QAAL,CAAc;AAAEL,QAAAA,YAAY,EAAE,KAAKA,YAAL,GAAoB;AAApC,OAAd;AACH;;;;EA3BoBH,KAAK,CAACS,S;;AA8B/B,eAAeR,UAAf","sourcesContent":["import React from 'react'\n\nclass BeatsState extends React.Component{\n    state = {\n        beatRowCount: 1,\n        soundRowCount: 1,\n        soundCardCount: 0,\n        noteValue: 1,\n        maxValue: 4\n    }\n    decrementNoteValue() {\n        if (this.state.noteValue === 1) {\n            this.setState({ noteValue: this.state.maxValue })\n        } else {\n            this.setState({ noteValue: this.state.noteValue - 1 })\n        }\n    }\n    incrementNoteValue() {\n        if (this.state.noteValue === this.state.maxValue) {\n            this.setState({ noteValue: 1 })\n        } else {\n            this.setState({ noteValue: this.state.noteValue + 1 })\n        }\n    }\n    incrementBeatRowCount() {\n        this.setState({ beatRowCount: this.beatRowCount + 1 })\n    }\n    decrementBeatRowCount() {\n        this.setState({ beatRowCount: this.beatRowCount - 1 })\n    }\n}\n\nexport default BeatsState;\n"]},"metadata":{},"sourceType":"module"}